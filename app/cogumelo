#!/usr/bin/php -q
<?php
  //
  // CARGO COGUMELO, É PRECISO FACER UNS CANTOS APAÑOS
  //

  $_SERVER['HTTPS'] = false;
  $_SERVER['HTTP_HOST'] = '';
  $_SERVER['REQUEST_URI'] = 'cogumelo shell script';
  $_SERVER['REMOTE_ADDR'] = "local_shell";

  // Project location
  define( 'WEB_BASE_PATH',getcwd().'/httpdocs' );
  define( 'APP_BASE_PATH', getcwd().'/c_app' );
  define( 'SITE_PATH', APP_BASE_PATH.'/' );

  // cogumelo core Location
  set_include_path('.:'.SITE_PATH);

  require_once("conf/setup.php");

  require_once(COGUMELO_LOCATION."/c_classes/CogumeloClass.php");
  require_once(SITE_PATH."/Cogumelo.php");

  global $_C;
  $_C =Cogumelo::get();

  //
  //  CARGO MÓDULO DEVEL E O DEVELDBCONTROLLER, QUE É ONDE ESTÁN OS MÉTODOS QUE NOS INTERESAN
  //
  require_once(ModuleController::getRealFilePath('devel.php', 'devel'));
  require_once(ModuleController::getRealFilePath('classes/controller/DevelDBController.php', 'devel'));
  require_once(ModuleController::getRealFilePath('classes/controller/CacheUtilsController.php', 'mediaserver'));
  Cogumelo::load('c_controller/ModuleController.php');
  Cogumelo::load('c_controller/ModuleController.php');

  //
  //  UTILIZO A CLASE COMO FARÍA DENDE UN VIEW NORMAL
  //
  $develdbcontrol = new DevelDBController();
  //var_dump( $develdbcontrol->getTablesSQL() ); // este método, por exemplo, devolvenos todo o  SQL xerado para os VO's do proxecto


   if ($argc>1){ //parameters handler
      switch($argv[1]){
        case 'setPermissions': // set the files/folders permission
          setPermissions();
        break;

        case 'setPermissionsDevel': // set the files/folders permission
          setPermissionsDevel();
        break;

        case 'createDB': // create database
          $user =  ReadStdin("Enter an user with privileges:\n", '');
          // Get the password
          fwrite(STDOUT, "Enter the password:\n");
          $passwd = getPassword(true);
          createDB($user, $passwd);
          fwrite(STDOUT, "\n--\n");
        break;

        case 'createTables': // create database tables
          createTables();
          echo "\nGenerated db tables\n";
        break;

        case 'bckDB': // do the backup of the db
          if ($argc>2){
            $file = $argv[2].'.sql';//name of the backup file
          }
          else{
            $file = false;
          }
          $user =  ReadStdin('Enter an user with privileges: ', '');
          doBackup(DB_NAME, $user, $file);
        break;

        case 'restoreDB': // restore the backup of a given db
          if ($argc>2){
           $db = $argv[2];
           $user =  ReadStdin('Enter an user with privileges: ', '');
           restoreDB(DB_NAME, $user, $db);
          }
          else{
            echo "You must especify the database to restore\n";
          }
        break;

        case 'installDependences':
            Cogumelo::load('c_controller/DependencesController.php');

            $dependencesControl = new DependencesController();
            $dependencesControl->installDependences();
        break;

        case 'generateTranslations':
          require_once(COGUMELO_LOCATION."/c_packages/base_app/httpdocs/vendorServer/gettext/gettext/Gettext/autoloader.php");
          generateTranslations();
          echo "The files.po are ready to be edited!\n";
        break;

        case 'compileTranslations':
          require_once(COGUMELO_LOCATION."/c_packages/base_app/httpdocs/vendorServer/gettext/gettext/Gettext/autoloader.php");
          compileTranslations();
          echo "The files.mo are ready to be used!\n";
        break;

        /* We execute this two actions from web as we need to operate with the apache permissions*/
        case 'flush': // delete temporary files
           exec('wget -q --spider http://cogumelo/cogumelo-server.php?q=flush');
           echo "Temporary files deleted!\n";
        break;

        case 'rotateLogs':
            exec('wget -q --spider cogumelo/cogumelo-server.php?q=rotate_logs');
            echo "The logs have been stored\n";
        break;

        case 'generateClientCaches':
//          setPermissions();
          exec('wget -q --spider cogumelo/cogumelo-server.php?q=client_caches');
          echo "All client cachés generated into 'httpdocs/mediacache/' folder \n";
        break;
        default:
          echo "Invalid parameter;try:";
          printOptions();

      }//end switch
  }//end parameters handler
  else{
    echo "Not enough arguments. Try:";
    printOptions();
  }


  function printOptions(){
    echo "\n
          flush                         to remove temporary files
          generateClientCaches          to cache all js, css, compiled less and other client files
          setPermissions                to set the files/folders permission
          setPermissionsDevel           to set the files/folders permission
          createDB                      to create a database
          createTables                  to generate the tables
          bckDB                         to do a DB backup (optional arg: filename)
          restoreDB                     to restore a database
          installDependences            to install all modules dependencies
          generateTranslations          to get all the web text into a file.po
          compileTranslations           to compile file.po and get the translations ready
    \n\n";
  }

  function createDB($user, $passwd){
    $develdbcontrol = new DevelDBController($user, $passwd);
    $develdbcontrol->createSchemaDB();
    echo "\nDatase created!\n";
  }

  function createTables(){
    $develdbcontrol = new DevelDBController();
    $develdbcontrol->createTables();
  }


  function makeAppPaths() {
    $md = array( APP_TMP_PATH, SMARTY_CONFIG, SMARTY_COMPILE, SMARTY_CACHE,
      MEDIASERVER_TMP_CACHE_PATH, WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH,
      LOGDIR, MOD_FORM_FILES_TMP_PATH, MOD_FORM_FILES_APP_PATH, BCK );

    foreach( $md as $dir ) {
      if( !is_dir( $dir ) ) {
        if( !mkdir( $dir, 0777, true ) ) {
          echo 'ERROR: Imposible crear el dirirectorio: '.$dir."\n";
        }
      }
    }
  }


  function setPermissions() {
    makeAppPaths();

    exec( 'sudo chown -R $USER:www-data '.WEB_BASE_PATH.' '.APP_BASE_PATH.' '.
      APP_TMP_PATH.' '.SMARTY_CONFIG.' '.SMARTY_COMPILE.' '.SMARTY_CACHE.' '.
      MEDIASERVER_TMP_CACHE_PATH.' '.WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH.' '.
      LOGDIR.' '.MOD_FORM_FILES_TMP_PATH.' '.MOD_FORM_FILES_APP_PATH );

    exec( 'chmod -R g-wx,g+rX,o-rwx '.WEB_BASE_PATH );

    exec( 'chmod -R g-wx,g+rX,o-rwx '.APP_BASE_PATH );

    // Path que necesitan escritura
    exec( 'chmod -R ug+rwX '.APP_TMP_PATH.' '.SMARTY_CONFIG.' '.SMARTY_COMPILE.' '.SMARTY_CACHE.' '.
      MEDIASERVER_TMP_CACHE_PATH.' '.WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH.' '.
      LOGDIR.' '.MOD_FORM_FILES_TMP_PATH.' '.MOD_FORM_FILES_APP_PATH );

    // Solo usuario administrador
    exec( 'sudo chown $USER:$USER '.BCK );
    exec( 'chmod -R go-rwx '.BCK );

    echo "Permissions ready!\n";
  }


  function setPermissionsDevel(){
    makeAppPaths();

    exec( 'sudo chown -R $USER:www-data '.WEB_BASE_PATH.' '.APP_BASE_PATH.' '.
      APP_TMP_PATH.' '.SMARTY_CONFIG.' '.SMARTY_COMPILE.' '.SMARTY_CACHE.' '.
      MEDIASERVER_TMP_CACHE_PATH.' '.WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH.' '.
      LOGDIR.' '.MOD_FORM_FILES_TMP_PATH.' '.MOD_FORM_FILES_APP_PATH );

    exec( 'chmod -R u-x,go-wx,ugo+rX '.WEB_BASE_PATH );

    exec( 'chmod -R go-wx,go+rX '.APP_BASE_PATH );

    // Path que necesitan escritura
    exec( 'chmod -R ug+rwX,o+rX '.APP_TMP_PATH.' '.SMARTY_CONFIG.' '.SMARTY_COMPILE.' '.SMARTY_CACHE.' '.
      MEDIASERVER_TMP_CACHE_PATH.' '.WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH.' '.
      LOGDIR.' '.MOD_FORM_FILES_TMP_PATH.' '.MOD_FORM_FILES_APP_PATH );

    // Solo usuario administrador
    exec( 'sudo chown $USER:$USER '.BCK );
    exec( 'chmod -R go-rwx '.BCK );

    echo "Permissions ready!\n";
  }

  function doBackup($BD, $user, $file){

    if (!$file)
      $file = date('Ymd-Hms').'-'.$BD.'.sql';

    $DIR = BCK;

    popen('mysqldump -u '.$user.' -p '.$BD.'> '.$DIR.'/'.$file, 'r');
    exec('sudo gzip '.$DIR.'/'.$file);
    exec('chmod go-rwx '.$DIR.'/*');
    echo "\nYour db was successfully saved!\n";
  }

  function restoreDB($BD, $user, $file){

    $DIR = BCK;

    $type = exec('file '.$DIR.$file);
    $position = strpos($type, 'gzip');
    if ($position!=false){
      popen('gunzip -c '.$DIR.$file.' | mysql -u '.$user.' -p '.$BD, 'r');
    }
    else{
      popen('mysql -u '.$user.' -p '.$BD.'< '.$DIR.$file, 'r');
    }
    echo "\nYour db was successfully restored!\n";
}

  /**
    * Get all the text to be translated and update or create a file.po if not exists
    */
  function generateTranslations(){
    // Prepare the enviroment to localize the project
    $textdomain="c_cogumelo";

    $locale= 'es_ES';

    global $c_lang;

    putenv('LANGUAGE='.$locale);
    putenv('LANG='.$locale);
    putenv('LC_ALL='.$locale);
    putenv('LC_MESSAGES='.$locale);

    setlocale(LC_ALL,$locale);
    setlocale(LC_CTYPE,$locale);

    bindtextdomain($textdomain, SITE_PATH.'conf/i18n');
    bind_textdomain_codeset($textdomain, 'UTF-8');
    textdomain($textdomain);

    $dir_path = SITE_PATH.'conf/i18n/';
    $dir_modules_c = COGUMELO_LOCATION.'/c_modules/';
    $dir_modules = SITE_PATH.'modules/';
    global $C_ENABLED_MODULES;
    $modules = $C_ENABLED_MODULES;

    // Check if the .po files already exist
    $existPHP = false;
    $existTPL = false;
    $existJS = false;
    if (is_dir($dir_path)){
      $handle = opendir($dir_path);
      while ($file = readdir($handle)) {
        if ($file=='c_cogumelo_php.po'){
          $existPHP = true;
        }
        if ($file=='c_cogumelo_tpl.po'){
          $existTPL = true;
        }
        if ($file=='c_cogumelo_js.po'){
          $existJS = true;
        }
        if ($existPHP && $existTPL && $existJS)
          break;
      }
    }

    /******************************/
    /************ PHP *************/
    /******************************/

    // get all the .php files unless files into modules folder
    $all_files_php = CacheUtilsController::listFolderFiles(COGUMELO_LOCATION, array('php'), false);
    foreach($all_files_php as $i => $dir){
      if (strpos($dir,'/c_modules/')===false && strpos($dir,'/modules/')===false
          && strpos($dir,'/vendorServer/')===false && strpos($dir,'/tmp/')===false){ // We exclude files from modules, tmp and vendorServer
            $files_php[$i] = $dir->getRealPath();
      }
    }

    // get the .php files into modules folder
    $files_module_php = CacheUtilsController::listFolderFiles($dir_modules, array('php'), false);
    foreach ($modules as $i => $dir) {
      foreach ($files_module_php as $k => $file) {
        $parts = explode('/'.$dir.'/',$file);
        if (sizeof($parts)==2){
          $parts[1] = (string) ereg_replace('[[:space:]]+','',$parts[1]);
          $array_php_module[$k] = ModuleController::getRealFilePath($parts[1], $dir);// Array of files with gettext strings
        }
      }
    }

    // get the .php files into c_modules folder
    $files_module_php_c = CacheUtilsController::listFolderFiles($dir_modules_c, array('php'), false);
    foreach ($modules as $i => $dir) {
      foreach ($files_module_php_c as $k => $file) {
        $parts = explode('/'.$dir.'/',$file);
        if (sizeof($parts)==2){
          $parts[1] = (string) ereg_replace('[[:space:]]+','',$parts[1]);
          $array_php_module_c[$k] = ModuleController::getRealFilePath($parts[1], $dir);// Array of files with gettext strings
        }
      }
    }

    // We combine all the arrays that we've got in an only array
    $array_php = array_merge($array_php_module, $array_php_module_c, $files_php);

    if ($existPHP){ //merge
      //Scan the php code to find the latest gettext entries
      $entries = Gettext\Extractors\PhpCode::extract($array_php);

      //Get the translations of the code that are stored in a po file
      $oldEntries = Gettext\Extractors\Po::extract($dir_path.$textdomain.'_php.po');

      //Apply the translations from the po file to the entries, and merges header and comments but not references and without add or remove entries:
      $entries->mergeWith($oldEntries); //now $entries has all the values
    }
    else{ //create
      $entries = Gettext\Extractors\PhpCode::extract($array_php);
    }

    //Now save the php.po file with the result
    Gettext\Generators\Po::generateFile($entries, $dir_path.$textdomain.'_php.po');

    /********** END PHP **********/

    /******************************/
    /************* JS *************/
    /******************************/

    // get all the .js files unless files into modules folder
    $all_files_js = CacheUtilsController::listFolderFiles(COGUMELO_LOCATION, array('js'), false);
    foreach($all_files_js as $i => $dir){
      if (strpos($dir,'/c_modules/')===false && strpos($dir,'/modules/')===false
          && strpos($dir,'/vendor/')===false && strpos($dir,'/vendorServer/')===false
          && strpos($dir,'/pluggins/')===false && strpos($dir,'/jquery-validation/')===false
          && strpos($dir,'/tmp/')===false){ // We exclude files from modules, tmp and vendorServer
            $files_js[$i] = $dir->getRealPath();
      }
    }

    // get the .js files into modules folder
    $files_module_js = CacheUtilsController::listFolderFiles($dir_modules, array('js'), false);
    foreach ($modules as $i => $dir) {
      foreach ($files_module_js as $k => $file) {
        $parts = explode('/'.$dir.'/',$file);
        if (sizeof($parts)==2){
          $parts[1] = (string) ereg_replace('[[:space:]]+','',$parts[1]);
          $array_js_module[$k] = ModuleController::getRealFilePath($parts[1], $dir);// Array of files with gettext strings
        }
      }
    }

    // get the .js files into c_modules folder
    $files_module_js_c = CacheUtilsController::listFolderFiles($dir_modules_c, array('js'), false);
    foreach ($modules as $i => $dir) {
      foreach ($files_module_js_c as $k => $file) {
        $parts = explode('/'.$dir.'/',$file);
        if (sizeof($parts)==2){
          $parts[1] = (string) ereg_replace('[[:space:]]+','',$parts[1]);
          $array_js_module_c[$k] = ModuleController::getRealFilePath($parts[1], $dir);// Array of files with gettext strings
        }
      }
    }

    // We combine all the arrays that we've got in an only array
    $array_js = array_merge($array_js_module, $array_js_module_c, $files_js);

    if ($existJS){ //merge
      //Scan the php code to find the latest gettext entries
      $entries = Gettext\Extractors\JsCode::extract($array_js);

      //Get the translations of the code that are stored in a po file
      $oldEntries = Gettext\Extractors\Po::extract($dir_path.$textdomain.'_js.po');

      //Apply the translations from the po file to the entries, and merges header and comments but not references and without add or remove entries:
      $entries->mergeWith($oldEntries); //now $entries has all the values
    }
    else{ //create
      $entries = Gettext\Extractors\JsCode::extract($array_js);
    }

    //Now save the php.po file with the result
    Gettext\Generators\Po::generateFile($entries, $dir_path.$textdomain.'_js.po');


    /*********** END JS **********/

    /******************************/
    /************* TPL *************/
    /******************************/

    // Buscar a forma de extraer os strings dos tpl

    /*********** END TPL **********/
  }

  /**
  * Compile files.po to get the translations ready to be used
  */
  function compileTranslations(){
    $dir_path = SITE_PATH.'conf/i18n/';
    $textdomain="c_cogumelo";

  }

  /**
   * Get data from the shell.
   */
  function ReadStdin($prompt, $valid_inputs, $default = '') {
      while(!isset($input) || (is_array($valid_inputs) && !in_array($input, $valid_inputs)) || ($valid_inputs == 'is_file' && !is_file($input))) {
          echo $prompt;
          $input = strtolower(trim(fgets(STDIN)));
          if(empty($input) && !empty($default)) {
              $input = $default;
          }
      }
      return $input;
  }

  /**
   * Get a password from the shell.
   * This function works on *nix systems only and requires shell_exec and stty.
   *
   * @param  boolean $stars Wether or not to output stars for given characters
   * @return string
   */
  function getPassword($stars = false)
  {
      // Get current style
      $oldStyle = shell_exec('stty -g');

      if ($stars === false) {
          shell_exec('stty -echo');
          $password = rtrim(fgets(STDIN), "\n");
      } else {
          shell_exec('stty -icanon -echo min 1 time 0');

          $password = '';
          while (true) {
              $char = fgetc(STDIN);

              if ($char === "\n") {
                  break;
              } else if (ord($char) === 127) {
                  if (strlen($password) > 0) {
                      fwrite(STDOUT, "\x08 \x08");
                      $password = substr($password, 0, -1);
                  }
              } else {
                  fwrite(STDOUT, "*");
                  $password .= $char;
              }
          }
      }

      // Reset old style
      shell_exec('stty ' . $oldStyle);

      // Return the password
      return $password;
  }

